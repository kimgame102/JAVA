형변환(Casting)
	- 자동 형변환
		정수 + 정수 = 정수
		정수 + 실수 = 실수 
		정수 + 문자 = 정수 (문자는 정수로 되어있음, 아스키코드)
		
		
		3 + 0.0 = 3.0
		5 / 2 = 2
		5 % 2 = 1 
		5.0 / 2 = 2.5
		5 / 2.0 = 2.5

	- 강제 형변환(Casting)
		(자료형)값
		(double)3


문자열 형변환
	1. 다른 자료형을 문자열로
		문자열과 다른 일반 자료형을 연결하면 결과는 문자열이 된다.

	2. 문자열을 다른 자료형으로
		일반 자료형은 일반 자료형끼리만 형변환이 가능하다.
		문자열 타입은 클래스 타입이므로, 일반 자료형의 클래스 타입의 도움을 받아야한다.

		Integer.parseInt("") => 문자열에서 변환(추출)된 정수
		Double.parseDouble("") => 문자열에서 변환(추출)된 실수 값

---------------------------------------------------------------------------------------------------------------------
입력
	커서가 깜빡이고 있는 상태를 입력상태라고 한다.
	입력하기 전에 출력을 통해 어떤 값을 입력해야 할지 사용자에게 알려주어야 한다.

입력 클래스
	Scanner sc = new Scanner(System.in);
	--------  ---    --------------------------
	  (1)     (2)                   (3)
	
	(1) : 자료형
 	(2) : 변수명
	(3) : 값


입력 메소드
	next(): 사용자가 입력한 문자열 값
		- 사용자가 입력한 값 중 공백 또는 줄바꿈 문자(엔터)를 
		  구분점으로 각 문자열을 분리한다.
		- 첫 번째 문자열은 첫 번째 next()에 담기고 
		  두 번째 문자열은 두 번째 next()에 담긴다.

	nextLine(): 사용자가 입력한 문자열 값
		- 공백 또는 줄바꿈 문자도 모두 값으로 취급하기 때문에 그대로 입력받는다.

-------------------------------------------------------------------------------------------------------------------
연산자
	기능이 있는 특수문자

연산자의 우선순위
	최우선 연산자
	단항 연산자
	산술 연산자
	쉬프트 연산자
	관계 연산자
	논리 연산자
	삼항 연산자
	대입 연산자

결합성
	하나의 수식에 동일한 연산자가 여러 개 사용도면 알맞은 방향으로 결합되어 연산되는 성질
----------------------------------------------------------------------------------------------------------------------
논리형(boolean)
	참: true
	거짓: false
	
	boolean(1byte) = true, false
	boolean check = true;
	초기값: false;

조건식
	결과가 참 또는 거짓, 둘 중 하나가 나오는 식.

	관계 연산자
		== 	같다
		!- 	같지 않다
		>, <	초과, 미만
		>=, <=	이상, 이하


	논리 연산자
		&& (AND), A && B		두 조건식 모두 참이면 참
		|| (OR), A||B		둘 중 하나라도 참이면 참


	단항 연산자
		!(NOT), !A		조건식이 참이면 거짓으로, 거짓이면 참으로 변경

	삼항 연산자
		?:	조건식 ? 참 : 거짓, 조건식이 참이면 참, 거짓이면 거짓
		예) int result = 10 > 11 ? 10 : 11 

------------------------------------------------------------------------------------------------------------------
제어문
	▶ 조건문
		▷ if문
			(1) 위의 조건식 결과와 상관없이 무조건 검사

			if(조건식){
				실행할 문장;
			}
			if(조건식){
				실행할 문장;
			}
			if(조건식){
				실행할 문장;
			}
			...

			(2) 위의 조건식이 false여야 검사, ture라면 검사하지 않음.

			if(조건식){
				실행할 문장;
			}
			else if(조건식){
				실행할 문장;
			}
			else if(조건식){
				실행할 문장;
			}
			...
			else {
				실행할 문장;
			}


		▷ switch문
			 (1) "값" 자리에 보통 변수를 담아놓고, case에 작성된 값과 같은지 검사한다.
         
        			 switch(값){
        			 case 값1:
           			 실행할 문장;
			 break;

         			case 값2:
            			실행할 문장;
			 break;
        			 ...
        			 default:
           			 실행할 문장;
			 break;
        			 }

			(2) JDK 17버전부터 사용가능한 화살표 방식의 switch 문
        			 switch(값){
        			 case 값1 -> 실행할 문장;
           			 case 값2 -> 실행할 문장;
			 .....
			default -> 실행할 문장;
			}


	※삼항 연산자, if문 switch문의 비교
		삼항 연산자: 조건식을 1개만 사용해도 될 때
		if문: 조건식에 비료(>,<,>=,<=)연산자를 사용하거나, 
			여러개의 조건식을 논리 연산자로 연결 할 때 사용
		switch문: 하나의 변수에 여러 경우의 값이 담길 수 있고, 
			각 값이 같은지 비교할 때 사용


		
	

































