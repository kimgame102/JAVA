함수형 인터페이스(Functional Interface)
	인터페이스 중 추상 메소드를 하나만 가지고 있는 인터페이스를 함수형 인터페이스라고 한다.
	이 때 @functionalinterface를 인터페이스 위에 작성하여 단 하나의 추상 메소드만 선언하도록 제한한다.
	

람다식(Lambda Expression)
	함수형 인터페이스에서는 한 개의 추상 메소드만 존재하기 때문에 구현 시 메소드 이름이 딱히 필요가 없다.
	람다식은 이름이 없는 메소드로서, 값처럼 사용이 가능하고 당연히 매개변수로도 전달이 가능하다.
	따라서 람다식을 익명 메소드(Anonymous Method)라고도 부른다.

람다식 문법
	1. (매개변수 형식 나열, ...) -> 리턴값;
	2. (매개변수 형식 나열, ...) -> {실행할 문장; return 리턴값;}
	3. 매개변수 -> 리턴값; 	// 매개변수가 하나면 소괄호 생략 가능, 하지만 소괄호 쓰는게 좋음
	4. 매개변수 -> {실행할 문장; return 리턴값;}
	5. () // 매개변수가 하나도 없으면 소괄호 무조건 사용

	
[기초 실습]
  	package는 lambdaTask로 선언한다.
   
   	PrintName 인터페이스 선언
   	getFullName() 추상 메소드 선언
   	- 성과 이름을 전달받는다.

   	PrintNameTest 클래스 선언
   	printFullName() 메소드 선언
   	- 외부에서 구현된 PrintName을 전달받은 뒤 전체 이름을 출력

   	main 메소드에서 printFullName()을 사용하여 테스트 진행
======================================================================================
[심화 실습]
두 개의 정수를 입력받아서 알맞는 덧셈, 뺄셈 결과를 확인하는 애플리케이션 제작

입력 예1) 7 + 35 - 9
출력 예1) 33

입력 예2) -9 + 8 + 10
출력 예2) 9

* "ABC".split("")은 [A][B][C] 3칸 문자열 배열로 리턴된다.
   "A,B,C".split(",")은 [A][B][C] 3칸 문자열 배열로 리턴된다.
   split("구분점")을 전달하면 문자열에서 동일한 구분점을 기준으로 문자열 값을 잘라낸 후 문자열 배열로 리턴한다.
   구분점을 여러 개 사용할 때에는 split("구분점|구분점")으로 사용하며, "+", "-"를 구분점으로 사용할 때에는 "\\+", "\\-"로 표현한다.
   예)"4 + 9".split("\\+")은 [4][9] 2칸 문자열 배열로 리턴

* 사용자가 정상적으로만 입력한다는 가정 하에 구현하도록 한다.
* 두 정수를 전달받은 후 int로 리턴하는 calc 추상메소드 선언(함수형 인터페이스 제작) - Calc
* 두 정수의 덧셈, 뺄셈을 구해주는 함수형 인터페이스를 리턴하는 static 메소드 선언(람다식 리턴)
* 전체 식을 전달받은 후 String[]로 리턴하는 getOpers 추상메소드 선언(함수형 인터페이스 제작) - OperCheck
* main메소드에 getOpers를 람다식으로 구현 - MyMath(메인 메소드 선언)
* 첫번째 정수가 음수일 경우 오류 해결

==============================================================================================
예외처리
	컴파일 시, 빌드 시, 런타임 시 오류가 발생하면
	제어문으로 막을 수 없는 경우가 생긴다.
	이 때 예외 처리 문법으로 해결할 수 있다.
	컴퓨터에 이상이 생길 정도로 심각한 오류는 에러라고 표현하고
	프로그램에 이상이 생긴 것을 예외라고 부른다.
	하지만 정해진 용어는 정확히 없으며, 보통 "오류"라고 부른다.

예외 처리 문법
	try {
		오류가 발생할 수 있는 문장
	}
	catch(예외이름 객체명){
		오류 발생 시 실행할 문장;
	}catch(예외이름 객체명){
		오류 발생 시 실행할 문장;
	}
	....

	finally{
		catch에서 잡히지 않은 오류가 있더라도 무조건 실행
	}

예외 발생
	직접 예외를 발생시키기 위해서는 예외 던지기를 사용해야 하며, 이 때 생성자 호출 전 throw 키워드를 사용한다.
	예) throw new BadWordException();

	if(login(i,pw)){
		로그인 성공했으니까 메인페이지 헤더에 프로필 넣어주고 헤더 바꿔주고 메인 페이지로 이동
	}else{
		throw new LoginFailedException();
	}

사용자 정의 예의
	기본적으로 제공되는 예외가 아닌 특정 상황에서 직접 예외를 만들어야 한다면,
	Exception 혹은 RuntimeException을 상속 받아서 예외 클래스를 선언해야 한다.
	Exception은 컴파일러가 체크하기 때문에 예외처리를 강제로 해야하고,
	RuntimeException은 컴파일러가 체크하지 않기 때문에 예외처리를 선택할 수 있다.
	















	