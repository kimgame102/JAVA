추상 클래스
	필드 안에 구현이 안된 메소드가 선언되어 있는 클래스를 추상 클래스라고 한다.
	이 떄 구현되지 않은 메소드를 추상 메소드라고 부른다.
	즉, 추상 클래스에 추상 메소드를 선언할 수 있다.
	반드시 재정의를 통해 구현을 해야 메모리에 할당되기 때문에
	"강제성"을 부여할 수 있게 된다.

추상 클래스 선언
	abstract class 클래스명 {
		abstract 리턴타입 메소드명(매개변수, ..); --> 추상 메소드라 ()뒤에 {}가 필요없음
		일반 메소드도 선언 가능하다. --> 어차피 클래스이기 때문에
	}


인터페이스(틀): 밖에서 절대로 수정되면 안된다.
	추상 클래스를 고도화시킨 문법, 상수와 추상 메소드만 존재한다.
	구현은 지정한 클래스에서 진행하고, 인터페이스를 다른 클래스에 지정할 때에는
	implements 키워드를 사용한다.
	
추상 클래스와 인터페이스 간의 관계
	인터페이스를 클래스에 바로 지정하면 모든 메소드에 강제성이 부여되기 때문에
	전부 다 구현해야 한다. 하지만 일반적인 상황에서는 필요한 메소드를 골라서 재정의한다.
	따라서 인터페이스를 직접 지정하지 않고 다른 클래스에 지정한 후 구현해 놓는다면,
	강제성이 소멸되고 이로 인해 골라서 재정의할 수 있게 된다.
	이 때 중간에서 강제성을 없애주는 클래스를 추상 클래스로 선언하기로 하며,
	추상 클래스 이름 뒤에는  Adapter를 붙여서 목적을 알려준다.

마커 인터페이스( Marker Interface)
	※ 인터페이스도 타입이다.
	클래스들을 그룹화하기 위한 목적으로 사용한다.
	인터페이스는 지정한 클래스의 부모이며, 모든 자식은 부모의 타입이므로
	마커 인터페이스를 지정받은 클래스들이 하나의 타입으로 묶이게 된다.
	이름 뒤에 Marker를 붙여서 목적성을 나타낸다.

다중 상속
	extends A,B
	여러 부모 클래스를 상속하는 것을 다중 상속이라고 한다.
	JAVA는 모호성 때문에 다중 상속을 지원하지 않는다.
	하지만 JDK8 버전 부터는 인터페이스에 default 메소드를 선언할 수 있으며,
	여러 개 지정할 수 있는 인터페이스 특성상 다중 상속을 지원하는 것이나 다름이 없다.

모호성(ambiguity)
	하나의 자식이 여러 부모를 상속받을 때 부모 필드에 동일한 이름의 필드가 있을 경우,
	어떤 부모의 필드인지 알 수가 없다. 이를 모호성이라고 부른다.

모호성 해결 방법
- 상황1: 부모 클래스의 public 메소드와 인터페이스의 default 메소드의 이름과 매개변수가 똑같이 선언되어 있다.
- 해결1: 자식 클래스에서 재정의하여 사용하며, 원하는 부모의 필드에 접근하기 위해서"부모명.super.필드명"과 같이 작성한다.
	만약 재정의하지 않는다면, 인터페이스가 아닌 부모 클래스의 필드가 사용된다.

- 상황2: 두 개의 인터페이스 내에 이름과 매개변수가 똑같은 메소드가 선언되어 있다.
- 해결2: 구현 클래스에서 재정의하여 사용하며, 원하는 부모의 필드에 접근하기 위해서"부모명.super.필드명"과 같이 작성한다.




내부 클래스(InnerClass)
	어떤 영역 안에 클래스가 선언되면 내부 클래스라고 한다.

익명 클래스(Anonyous Inner Class)
	이름이 없는 클래스이며, 구현되지 않은 필드를 구현하기 위해서 일회성으로 생성되는 클래스이다.
------------------------------------------------------------------------------------------------------------------------------------------------------
[숙제]
나이키 회사를 설립한다.

잠실점은 일반 판매를 진행하는 지점이고,
강남점은 무료 나눔 행사를 진행하는 지점이다.

지점을 새로 오픈하면, 본사에 정해진 양식에 맞춰 최초 1회 등록해야한다.

무료 나눔 행사중이라면, "무료 나눔 행사"출력
일반 판매 중이라면, 판매를 직접 해본다(sell() 사용)

무료 나눔 행사중인 지점은 판매 방식을 등록할 필요 없다.







/////////////인터페이스 A
A a = new A();는 불가능 --> 구현이 안되어있어서







